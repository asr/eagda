------------------------------------------------------------------------
-- Release notes for Agda version 2.5.2
------------------------------------------------------------------------

TODO: replace X by a suitable number.
Important changes since 2.5.1.X:

Installation and infrastructure
===============================

* Modular support for literate programming

  Literate programming support has been moved out of the lexer and into the
  `Agda.Syntax.Parser.Literate` module.

  Files ending in `.lagda` are still interpreted as literate TeX.
  The extension `.lagda.tex` may now also be used for literate TeX files.

  Support for more literate code formats and extensions can be added modularly.

  By default, `.lagda.*` files are opened in the Emacs mode
  corresponding to their last extension.  One may switch to and from
  Agda mode manually.

* reStructuredText

  Literate Agda code can now be written in reStructuredText format, using
  the `.lagda.rst` extension.

  As a general rule, Agda will parse code following a line ending in `::`,
  as long as that line does not start with `..`. The module name must
  match the path of the file in the documentation, and must be given
  explicitly.  Two files have been converted already:

  - `language/mixfix-operators.lagda.rst`
  - `tools/compilers.lagda.rst`

  Note that:

  - Code blocks inside an rST comment block will be type-checked by Agda,
    but not rendered in the documentation.
  - Code blocks delimited by `.. code-block:: agda` will be rendered in
    the final documenation, but not type-checked by Agda.
  - All lines inside a codeblock must be further indented than the first line
    of the code block.
  - Indentation must be consistent between code blocks. In other
    words, the file as a whole must be a valid Agda file if all the
    literate test is replaced by white space.

* Documentation testing

  All documentation files in the `doc/user-manual` directory that end
  in `.lagda.rst` can be typechecked by running `make
  user-manual-test`, and also as part of the general test suite.

* Support installation through Stack

  The Agda sources now also include a configuration for the stack install tool
  (tested through continuous integration).

  It should hence be possible to repeatably build any future Agda version
  (including unreleased commits) from source by checking out that version and
  running `stack install` from the checkout directory.
  By using repeatable builds, this should keep selecting the same dependencies
  in the face of new releases on Hackage.

  For further motivation, see https://github.com/agda/agda/issues/2005.

* Removed the `--test` command-line option

  This option ran the internal test-suite. This test-suite was
  implemented using Cabal supports for test-suites. [Issue #2083].

Language
========

* Dot patterns are now optional

  Consider the following program

    data Vec (A : Set) : Nat → Set where
      []   : Vec A zero
      cons : ∀ n → A → Vec A n → Vec A (suc n)

    vmap : ∀ {A B} n → (A → B) → Vec A n → Vec B n
    vmap .zero    f []            = []
    vmap .(suc m) f (cons m x xs) = cons m (f x) (vmap m f xs)

  If we don't care about the dot patterns they can (and could previously) be
  replaced by wildcards:

    vmap : ∀ {A B} n → (A → B) → Vec A n → Vec B n
    vmap _ f []            = []
    vmap _ f (cons m x xs) = cons m (f x) (vmap m f xs)

  Now it is also allowed to give a variable pattern in place of the dot
  pattern. In this case the variable will be bound to the value of the dot
  pattern. For our example:

    vmap : ∀ {A B} n → (A → B) → Vec A n → Vec B n
    vmap n f []            = []
    vmap n f (cons m x xs) = cons m (f x) (vmap m f xs)

  In the first clause n reduces to zero and in the second clause n reduces to
  suc m.

* Module parameters can now be refined by pattern matching

  Previously, pattern matches that would refine a variable outside the current
  left-hand side was disallowed. For instance, the following would give an
  error, since matching on the vector would instantiate n.

    module _ {A : Set} {n : Nat} where
      f : Vec A n → Vec A n
      f []       = []
      f (x ∷ xs) = x ∷ xs

  Now this is no longer disallowed. Instead n is bound to the appropriate
  value in each clause.

* As-patterns [Issue #78].

  As-patterns (@-patterns) are finally working and can be used to name a
  pattern. The name has the same scope as normal pattern variables (i.e. the
  right-hand side, where clause, and dot patterns). The name reduces to the
  value of the named pattern. For example::

    module _ {A : Set} (_<_ : A → A → Bool) where
      merge : List A → List A → List A
      merge xs [] = xs
      merge [] ys = ys
      merge xs@(x ∷ xs₁) ys@(y ∷ ys₁) =
        if x < y then x ∷ merge xs₁ ys
                 else y ∷ merge xs ys₁


* Idiom brackets.

  There is new syntactic sugar for idiom brackets:

    (| e a1 .. an |) expands to

    pure e <*> a1 <*> .. <*> an

  The desugaring takes place before scope checking and only requires names
  'pure' and '_<*>_' in scope. Idiom brackets work well with operators, for
  instance

    (| if a then b else c |) desugars to

    pure if_then_else_ <*> a <*> b <*> c

  Limitations:

    - The top-level application inside idiom brackets cannot include implicit
      applications, so (| foo {x = e} a b |) is illegal. In the case e is pure
      you can write (| (foo {x = e}) a b |) which desugars to

        pure (foo {x = e}) <*> a <*> b

    - Binding syntax and operator sections cannot appear immediately inside
      idiom brackets.

* Layout for pattern matching lambdas.

  You can now write pattern matching lambdas using the syntax

    λ where false → true
            true  → false

  avoiding the need for explicit curly braces and semicolons.

* Overloaded projections [Issue #1944].

  Ambiguous projections are no longer a scope error.  Instead they get
  resolved based on the type of the record value they are
  eliminating.  This corresponds to constructors, which can be
  overloaded and get disambiguated based on the type they are
  introducing.  Example:

    module _ (A : Set) (a : A) where

    record R B : Set where
      field f : B
    open R public

    record S B : Set where
      field f : B
    open S public

  Exporting `f` twice from both `R` and `S` is now allowed.  Then,

    r : R A
    f r = a

    s : S A
    f s = f r

  disambiguates to:

    r : R A
    R.f r = a

    s : S A
    S.f s = R.f r

  If the type of the projection is known, it can also be disambiguated
  unapplied.

    unapplied : R A -> A
    unapplied = f

* Projection parameters [Issue #1954].

  When copying a module, projection parameters will now stay hidden
  arguments, even if the module parameters are visible.
  This matches the situation we had for constructors since long.
  Example:

    module P (A : Set) where
      record R : Set where
        field f : A

    open module Q A = P A

  Parameter A is now hidden in R.f:

    test : ∀{A} → R A → A
    test r = R.f r

  Note that a module parameter that corresponds to the record value
  argument of a projection will not be hidden.

    module M (A : Set) (r : R A) where
      open R A r public

    test' : ∀{A} → R A → A
    test' r = M.f r

* Eager insertion of implicit arguments [Issue #2001]

  Implicit arguments are now (again) eagerly inserted in left-hand sides. The
  previous behaviour of inserting implicits for where blocks, but not
  right-hand sides was not type safe.

* Module applications can now be eta expanded/contracted without changing their behaviour [Issue #1985]

  Previously definitions exported using 'open public' got the incorrect type
  for underapplied module applications.

  Example:

    module A where
      postulate A : Set

    module B (X : Set) where
      open A public

    module C₁ = B
    module C₂ (X : Set) = B X

  Here both C₁.A and C₂.A have type (X : Set) → Set.

* Polarity pragmas.

  Polarity pragmas can be attached to postulates. The polarities express
  how the postulate's arguments are used. The following polarities
  are available:

  _:  Unused.
  ++: Strictly positive.
  +:  Positive.
  -:  Negative.
  *:  Unknown/mixed.

  Polarity pragmas have the form

    {-# POLARITY name <zero or more polarities> #-},

  and can be given wherever fixity declarations can be given. The
  listed polarities apply to the given postulate's arguments
  (explicit/implicit/instance), from left to right. Polarities
  currently cannot be given for module parameters. If the postulate
  takes n arguments (excluding module parameters), then the number of
  polarities given must be between 0 and n (inclusive).

  Polarity pragmas make it possible to use postulated type formers in
  recursive types in the following way:

    postulate
      ∥_∥ : Set → Set

    {-# POLARITY ∥_∥ ++ #-}

    data D : Set where
      c : ∥ D ∥ → D

  Note that one can use postulates that may seem benign, together with
  polarity pragmas, to prove that the empty type is inhabited:

    postulate
      _⇒_    : Set → Set → Set
      lambda : {A B : Set} → (A → B) → A ⇒ B
      apply  : {A B : Set} → A ⇒ B → A → B

    {-# POLARITY _⇒_ ++ #-}

    data ⊥ : Set where

    data D : Set where
      c : D ⇒ ⊥ → D

    not-inhabited : D → ⊥
    not-inhabited (c f) = apply f (c f)

    d : D
    d = c (lambda not-inhabited)

    bad : ⊥
    bad = not-inhabited d

  Polarity pragmas are not allowed in safe mode.

Emacs mode
==========

* Changed feature: Interactively split result.

  Make-case (C-c C-c) with no variables will now /either/ introduce
  function arguments /or/ do a copattern split (or fail).

  This is as before:

    test : {A B : Set} (a : A) (b : B) → A × B
    test a b = ?

    -- expected:
    -- proj₁ (test a b) = {!!}
    -- proj₂ (test a b) = {!!}

    testFun : {A B : Set} (a : A) (b : B) → A × B
    testFun = ?

    -- expected:
    -- testFun a b = {!!}

  This is has changed:

    record FunRec A : Set where
      field funField : A → A
    open FunRec

    testFunRec : ∀{A} → FunRec A
    testFunRec = ?

    -- expected (since 2016-05-03):
    -- funField testFunRec = {!!}

    -- used to be:
    -- funField testFunRec x = {!!}

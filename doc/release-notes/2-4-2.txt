------------------------------------------------------------------------
-- Release notes for Agda 2 version 2.4.2
------------------------------------------------------------------------

Important changes since 2.4.0:

Installation and Infrastructure
===============================

Pragmas and Options
===================

* The option --termination-depth is now obsolete.

  The default termination depth is now infinity instead of
  (previously) 1.  This means that setting --termination-depth might
  now make the termination checker *weaker* (instead of stronger).
  However, there is no guaranteed effect of setting
  --termination-depth any more.  The flag is only kept for debugging
  Agda.

  For example, the following code now passes the termination checker
  (needed higher --termination-depth before):

    f : Nat → Nat
    g : Nat → Nat

    f zero                = zero
    f (suc zero)          = zero
    f (suc (suc zero))    = zero
    f (suc (suc (suc n))) = g n     -- decrease by 3

    g n = f (suc (suc n))           -- increase by 2

  [See also issue 709.]

* New option: --with-K.

  This can be used to override a global --without-K in a file, by
  adding a pragma {-# OPTIONS --with-K #-}.

Language
========

* You now use 'quote' in patterns.

  For instance, here is a function that unquotes a (closed) natural number
  term.

    unquoteNat : Term → Maybe Nat
    unquoteNat (con (quote Nat.zero) [])            = just zero
    unquoteNat (con (quote Nat.suc) (arg _ n ∷ [])) = fmap suc (unquoteNat n)
    unquoteNat _                                    = nothing

* New syntactic sugar 'tactic e' and 'tactic e | e1 | .. | en'.

  It desugars as follows and makes it less unwieldy to call reflection-based
  tactics.

    tactic e                --> quoteGoal g in unquote (e g)
    tactic e | e1 | .. | en --> quoteGoal g in unquote (e g) e1 .. en

  Note that in the second form the tactic function should generate a function
  from a number of new subgoals to the original goal. The type of e should be
  Term -> Term in both cases.

* New reflection builtins for literals.

  The Term data type AGDATERM now needs an additional constructor AGDATERMLIT
  taking a reflected literal defined as follows (with appropriate builtin
  bindings for the types Nat, Float, etc).

    data Literal : Set where
      nat    : Nat    → Literal
      float  : Float  → Literal
      char   : Char   → Literal
      string : String → Literal
      qname  : QName  → Literal

    {-# BUILTIN AGDALITERAL   Literal #-}
    {-# BUILTIN AGDALITNAT    nat     #-}
    {-# BUILTIN AGDALITFLOAT  float   #-}
    {-# BUILTIN AGDALITCHAR   char    #-}
    {-# BUILTIN AGDALITSTRING string  #-}
    {-# BUILTIN AGDALITQNAME  qname   #-}

  When quoting (quoteGoal or quoteTerm) literals will be mapped to the
  AGDATERMLIT constructor. Previously natural number literals were quoted
  to suc/zero application and other literals were quoted to
  AGDATERMUNSUPPORTED.

* New reflection builtins for function definitions.

  AGDAFUNDEF should now map to a data type defined as follows
  (with {-# BUILTIN QNAME       QName   #-}
        {-# BUILTIN ARG         Arg     #-}
        {-# BUILTIN AGDATERM    Term    #-}
        {-# BUILTIN AGDATYPE    Type    #-}
        {-# BUILTIN AGDALITERAL Literal #-}).

    data Pattern : Set where
      con : QName → List (Arg Pattern) → Pattern
      dot : Pattern
      var : Pattern
      lit : Literal → Pattern
      proj : QName → Pattern

    {-# BUILTIN AGDAPATTERN Pattern #-}
    {-# BUILTIN AGDAPATCON con #-}
    {-# BUILTIN AGDAPATDOT dot #-}
    {-# BUILTIN AGDAPATVAR var #-}
    {-# BUILTIN AGDAPATLIT lit #-}
    {-# BUILTIN AGDAPATPROJ proj #-}

    data Clause : Set where
      clause : List (Arg Pattern) → Term → Clause

    {-# BUILTIN AGDACLAUSE    Clause #-}
    {-# BUILTIN AGDACLAUSECON clause #-}

    data FunDef : Set where
      funDef : Type → List Clause → FunDef

    {-# BUILTIN AGDAFUNDEF    FunDef #-}
    {-# BUILTIN AGDAFUNDEFCON funDef #-}

* New reflection builtins for extended (pattern-matching) lambda.

  The AGDATERM data type has been augmented with a constructor

    AGDATERMEXTLAM : List AGDACLAUSE → List (ARG AGDATERM) → AGDATERM

  Absurd lambdas (λ ()) are quoted to extended lambdas with an absurd clause.

* Unquoting declarations.

  You can now define (recursive) functions by reflection using the new
  unquoteDecl declaration

    unquoteDecl x = e

  Here e should have type AGDAFUNDEF and evaluate to a closed value. This value
  is then spliced in as the definition of x. In the body e, x has type QNAME
  which lets you splice in recursive definitions.

  Standard modifiers, such as fixity declarations, can be applied to x as
  expected.

Goal and error display
======================

Type checking
=============

* Recursive records need to be declared as either inductive or coinductive.
  'inductive' is no longer default for recursive records.
  Examples:

    record _×_ (A B : Set) : Set where
      constructor _,_
      field
        fst : A
        snd : B

    record Tree (A : Set) : Set where
      inductive
      constructor tree
      field
        elem     : A
        subtrees : List (Tree A)

    record Stream (A : Set) : Set where
      coinductive
      constructor _::_
      field
        head : A
        tail : Stream A

  If you are using old-style (musical) coinduction, a record may have
  to be declared as inductive, paradoxically.

    record Stream (A : Set) : Set where
      inductive -- YES, THIS IS INTENDED !
      constructor _∷_
      field
        head : A
        tail : ∞ (Stream A)

  This is because the ``coinduction'' happens in the use of `∞' and not
  in the use of `record'.

Compiler backends
=================

Tools
=====

Emacs mode
----------

LaTeX-backend
-------------

------------------------------------------------------------------------
-- Release notes for Agda version 2.4.4
------------------------------------------------------------------------

TODO: replace X by a suitable number.
Important changes since 2.4.2.X:

Installation and infrastructure
===============================

* For best performance, compile Agda with ghc >= 7.8.
  Agda is significantly slower if compiled with ghc-7.6.
  [Issue 1347]

Pragmas and options
===================

* Library management

  There is a new 'library' concept for managing include paths. A library
  consists of
    - a name,
    - a set of libraries it depends on, and
    - a set of include paths.

  A library is defined in a .agda-lib file using the following format:

    name: LIBRARY-NAME  -- Comment
    depend: LIB1 LIB2
      LIB3
      LIB4
    include: PATH1
      PATH2
      PATH3

  Dependencies are library names, not paths to .agda-lib files, and
  include paths are relative to the location of the library-file.

  To be useable, a library file has to be listed (with its full path) in
  AGDA_DIR/libraries (where AGDA_DIR defaults to ~/.agda on unix-like systems
  and C:/Users/USERNAME/AppData/Roaming/agda or similar on Windows, and can be
  overridden by setting the AGDA_DIR environment variable).
  Environment variables in the paths (of the form $VAR or ${VAR}) are
  expanded. The location of the libraries file used can be overridden using the
  --library-file=FILE flag, although this is not expected to be very useful.

  You can find out the precise location of the 'libraries' file by
  calling 'agda -l fjdsk Dummy.agda' and looking at the error message (assuming
  you don't have a library called fjdsk installed).

  There are three ways a library gets used:

    - You supply the --library=LIB (or -l LIB) option to Agda. This is
      equivalent to adding a -iPATH for each of the include paths of LIB
      and its (transitive) dependencies.

    - No explicit --library flag is given, and the current project root
      (of the Agda file that is being loaded) or one of its parent directories
      contains a .agda-lib file defining a library LIB. This library is used as
      if a --librarary=LIB option had been given, except that it is not
      necessary for the library to be listed in the AGDA_DIR/libraries file.

    - No explicit --library flag, and no .agda-lib file in the project
      root. In this case the file AGDA_DIR/defaults is read and all
      libraries listed are added to the path. The defaults file should
      contain a list of library names, each on a separate line. In this
      case the current directory is also added to the path.

      To disable default libraries, you can give the flag
      --no-default-libraries.

  Library names can end with a version number (for instance,
  mylib-1.2.3). When resolving a library name (given in a --library
  flag, or listed as a default library or library dependency) the
  following rules are followed:

    - If you don't give a version number, any version will do.
    - If you give a version number an exact match is required.
    - When there are multiple matches an exact match is preferred, and
      otherwise the latest matching version is chosen.

  For example, suppose you have the following libraries installed:
  mylib, mylib-1.0, otherlib-2.1, and otherlib-2.3. In this case, aside
  from the exact matches you can also say --library=otherlib to get
  otherlib-2.3.

* New Pragma COMPILED_DECLARE_DATA for binding recursively defined
  Haskell data types to recursively defined Agda data types.

  If you have a Haskell type like

    {-# LANGUAGE GADTs #-}

    module Issue223 where

    data A where
      BA :: B -> A

    data B where
      AB :: A -> B
      BB :: B

  You can now bind it to corresponding mutual Agda inductive data
  types as follows:

    {-# IMPORT Issue223 #-}

    data A : Set
    {-# COMPILED_DECLARE_DATA A Issue223.A #-}
    data B : Set
    {-# COMPILED_DECLARE_DATA B Issue223.B #-}

    data A where
      BA : B → A

    {-# COMPILED_DATA A Issue223.A Issue223.BA #-}
    data B where
      AB : A → B
      BB : B

    {-# COMPILED_DATA B Issue223.B Issue223.AB Issue223.BB #-}

  This fixes issue 223.

* New option --exact-split.

  The --exact-split flag causes Agda to raise an error whenever a clause in a
  definition by pattern matching cannot be made to hold definitionally (i.e. as
  a reduction rule). Specific clauses can be excluded from this check by means
  of the {-# CATCHALL #-} pragma.

  For instance, the following definition will be rejected as the second clause
  cannot be made to hold definitionally:

    min : Nat → Nat → Nat
    min zero    y       = zero
    min x       zero    = zero
    min (suc x) (suc y) = suc (min x y)

  Catchall clauses have to be marked as such, for instance:

    eq : Nat → Nat → Bool
    eq zero    zero    = true
    eq (suc m) (suc n) = eq m n
    {-# CATCHALL #-}
    eq _       _       = false

* New option: --no-exact-split.

  This option can be used to override a global --exact-split in a
  file, by adding a pragma {-# OPTIONS --no-exact-split #-}.

* New options: --sharing and --no-sharing.

  These options are used to enable/disable sharing and call-by-need evaluation.
  The default is --no-sharing.

  Note that they cannot appear in an OPTIONS pragma, but have to be given as
  command line arguments or added to the Agda Program Args from Emacs with M-x
  customize-group agda2.

* New pragma DISPLAY.

  {-# DISPLAY f e1 .. en = e #-}

  This causes f e1 .. en to be printed as e, where ei can bind variables used
  in e. The expressions ei and e are scope checked, but not type checked.

  For example this can be used to print overloaded (instance) functions with
  the overloaded name:

    instance
      NumNat : Num Nat
      NumNat = record { ..; _+_ = natPlus }

    {-# DISPLAY natPlus a b = a + b #-}

  Limitations

    Left-hand sides are restricted to variables, constructors, defined
    functions or types, and literals. In particular, lambdas are not allowed in
    left-hand sides.

    Since DISPLAY pragmas are not type checked implicit argument insertion may
    not work properly if the type of f computes to an implicit function space
    after pattern matching.

* Removed pragma {-# ETA R #-}

  The pragma {-# ETA R #-} is replaced by the eta-equality directive
  inside record declarations.

* New option --no-eta-equality.

  The --no-eta-equality flag disables eta rules for declared record types.
  It has the same effect as no-eta-equality inside each declaration of
  a record type R.

  If used with the OPTIONS pragma it will not affect records defined
  in other modules.

* The semantics of {-# REWRITE r #-} pragmas in parametrized modules has
  changed (see Issue 1652).

  Rewrite rules are no longer lifted to the top context. Instead, they now only
  apply to terms in (extensions of) the module context. If you want the old
  behaviour, you should put the {-# REWRITE r #-} pragma outside of the module
  (i.e. unindent it).


Language
========

Reflection
----------

* Unquoting function definitions.

  There is a new declaration

    unquoteDef x = e

  Here e should have type LIST AGDACLAUSE and evaluate to a closed value. Since
  unquoteDef only contains the function clauses you need a separate type
  signature. For instance, given that you have a 'derivingEq' function that
  builds decidable equality functions, you would say

    eqNat : (x y : Nat) → Dec (x ≡ y)
    unquoteDef eqNat = derivingEq (quote Nat) (quote eqNat)

  Note that, in contrast to unquoteDecl, you have to quote the name of the
  defined function to get a QNAME.

  The main advantage of unquoteDef over unquoteDecl is that unquoteDef is
  allowed in mutual blocks, allowing you to create mutually recursive
  definitions by unquoting.

* The reflection interface now exposes the name hint (as a string)
  for variables. As before, the actual binding structure is with
  de Bruijn indices. The String value is just a hint used as a prefix
  to help display the variable. The type Abs is a new bultin type used
  for the constructors `Term.lam`, `Term.pi`, `Pattern.var`
  (bultins `AGDATERMLAM`, `AGDATERMPI` and `AGDAPATVAR`).

    data Abs (A : Set) : Set where
      abs : (s : String) (x : A) → Abs A
    {-# BUILTIN ABS    Abs #-}
    {-# BUILTIN ABSABS abs #-}

  Updated constructor types:

    Term.lam    : Hiding   → Abs Term → Term
    Term.pi     : Arg Type → Abs Type → Term
    Pattern.var : String   → Pattern

* QuoteContext.

  The `quoteContext' keyword now returns a reflected representation of the current context as
  a term of type `List (Arg Type)'. For example:

    test : (n : Nat) (x y : Fin n) → quoteContext ≡
      arg₀ (el (lit 0) (def (quote Fin) (arg₀ (var 1 []) ∷ []))) ∷
      arg₀ (el (lit 0) (def (quote Fin) (arg₀ (var 0 []) ∷ []))) ∷
      arg₀ (el (lit 0) (def (quote Nat) [])) ∷ []
    test n x y = refl

  In addition, tactics now take an additional argument for the current context, i.e. instead
  of type `Term → Term', they should now have type `List (Arg Type) → Term → Term'.

* New constructors have been added to the reflected term data type:

  data Term : Set where
    ...
    quote-term    : Term → Term
    quote-goal    : Abs Term → Term
    quote-context : Term
    unquote-term  : Term → Term

  {-# BUILTIN AGDATERMQUOTETERM    quote-term    #-}
  {-# BUILTIN AGDATERMQUOTEGOAL    quote-goal    #-}
  {-# BUILTIN AGDATERMQUOTECONTEXT quote-context #-}
  {-# BUILTIN AGDATERMUNQUOTE      unquote-term  #-}

  These constructors will never be present in a term returned by quoteTerm,
  quoteGoal or quoteContext, but they can appear in argument to unquote. This
  makes it possible to write tactics that compute terms containing calls to
  other tactics.

  Example: Implementing (a version of) the tactic keyword using reflection

    -- unquote (`tactic (quote x)) == tactic (λ _ → x)
    `tactic : QName → Term
    `tactic x = quote-goal (abs "g" (unquote-term (def x (vArg (var 0 []) ∷ []))))

* Reflection-based macros

  Macros are functions of type t1 → t2 → .. → Term that are defined in a 'macro'
  block. Macro application is guided by the type of the macro, where Term
  arguments desugar into the 'quoteTerm' syntax and Name arguments into the
  'quote' syntax. Arguments of any other type are preserved as-is.

  For example, the macro application 'f u v w' where the macro
  f has the type 'Term → Name → Bool → Term' desugars into
    'unquote (f (quoteTerm u) (quote v) w)'

  Limitations:

    - Macros cannot be recursive. This can be worked around by defining the
      recursive function outside the macro block and have the macro call the
      recursive function.

  Silly example:

    macro
      plus-to-times : Term -> Term
      plus-to-times (def (quote _+_) (a ∷ b ∷ [])) = def (quote _*_) (a ∷ b ∷ [])
      plus-to-times v = v

    thm : (a b : Nat) → plus-to-times (a + b) ≡ a * b
    thm a b = refl

  Macros are most useful when writing tactics, since they let you hide the
  reflection machinery. For instance, suppose you have a solver

    magic : Term → Term

  that takes a reflected goal and outputs a proof (when successful). You can
  then use the `tactic function from above to define

    macro
      by-magic : Term
      by-magic = `tactic (quote magic)

  This lets you apply the magic tactic without any syntactic noise at all:

    thm : ¬ P ≡ NP
    thm = by-magic

* Modules in import directives

  When you use using/hiding/renaming on a name it now automatically applies to
  any module of the same name, unless you explicitly mention the module. For
  instance,

    open M using (D)

  is equivalent to

    open M using (D; module D)

  if M defines a module D. This is most useful for record and data types where
  you always get a module of the same name as the type.

  With this feature there is no longer useful to be able to qualify a
  constructor (or field) by the name of the data type even when it differs from
  the name of the corresponding module. The follow (weird) code used to work,
  but doesn't work anymore:

    module M where
      data D where
        c : D
    open M using (D) renaming (module D to MD)
    foo : D
    foo = D.c

  If you want to import only the type name and not the module you have to hide
  it explicitly:

    open M using (D) hiding (module D)

  See discussion on Issue 836 (https://github.com/agda/agda/issues/836).

* Private definitions of a module are no longer in scope at the Emacs
  mode top-level.

  The reason for this change is that .agdai-files are stripped of unused
  private definitions (which can yield significant performance
  improvements for module-heavy code).

  To test private definitions you can create a hole at the bottom of the
  module, in which private definitions will be visible.

Operator syntax
---------------

* The default fixity for syntax declarations has changed from -666 to 20.

* Sections.

  Operators can be sectioned by replacing arguments with underscores.
  There must not be any whitespace between these underscores and the
  adjacent nameparts. Examples:

    pred : ℕ → ℕ
    pred = _∸ 1

    T : Bool → Set
    T = if_then ⊤ else ⊥

    if : {A : Set} (b : Bool) → A → A → A
    if b = if b then_else_

  Sections are translated into lambda expressions. Examples:

    _∸ 1              ↦  λ section → section ∸ 1

    if_then ⊤ else ⊥  ↦  λ section → if section then ⊤ else ⊥

    if b then_else_   ↦  λ section section₁ →
                             if b then section else section₁

  Operator sections have the same fixity as the underlying operator
  (except in cases like "if b then_else_", in which the section is
  "closed", but the operator is not).

  Operator sections are not supported in patterns (with the exception
  of dot patterns), and notations coming from syntax declarations
  cannot be sectioned.

* A long-standing operator fixity bug has been fixed. As a consequence
  some programs that used to parse no longer do.

  Previously each precedence level was (incorrectly) split up into
  five separate ones, ordered as follows, with the earlier ones
  binding less tightly than the later ones:

    - Non-associative operators.

    - Left associative operators.

    - Right associative operators.

    - Prefix operators.

    - Postfix operators.

  Now this problem has been addressed. It is no longer possible to mix
  operators of a given precedence level but different associativity.
  However, prefix and right associative operators are seen as having
  the same associativity, and similarly for postfix and left
  associative operators.

  Examples
  --------

  The following code is no longer accepted:

    infixl 6 _+_
    infix  6 _∸_

    rejected : ℕ
    rejected = 1 + 0 ∸ 1

  However, the following previously rejected code is accepted:

    infixr 4 _,_
    infix  4 ,_

    ,_ : {A : Set} {B : A → Set} {x : A} → B x → Σ A B
    , y = _ , y

    accepted : Σ ℕ λ i → Σ ℕ λ j → Σ (i ≡ j) λ _ → Σ ℕ λ k → j ≡ k
    accepted = 5 , , refl , , refl

* The classification of notations with binders into the categories
  infix, prefix, postfix or closed has changed. [Issue 1450]

  The difference is that, when classifying the notation, only
  /regular/ holes are taken into account, not /binding/ ones.

  Example: The notation

    syntax m >>= (λ x → f) = x <- m , f

  was previously treated as infix, but is now treated as prefix.

* Notation can now include wildcard binders.

  Example: syntax Σ A (λ _ → B) = A × B

* If an overloaded operator is in scope with several distinct
  precedence levels, then several instances of this operator will be
  included in the operator grammar, possibly leading to ambiguity.
  Previously the operator was given the default fixity [Issue 1436].

  There is an exception to this rule: If there are multiple precedences,
  but at most one is explicitly declared, then only one instance will be
  included in the grammar. If there are no explicitly declared
  precedences, then this instance will get the default precedence, and
  otherwise it will get the declared precedence.

  If multiple occurrences of an operator are "merged" in the grammar,
  and they have distinct associativities, then they are treated as
  being non-associative.

  The three paragraphs above also apply to identical notations (coming
  from syntax declarations) for a given overloaded name.

  Examples:

    module A where

      infixr 5 _∷_
      infixr 5 _∙_
      infixl 3 _+_
      infix  1 bind

      syntax bind c (λ x → d) = x ← c , d

    module B where

      infix  5 _∷_
      infixr 4 _∙_
      -- No fixity declaration for _+_.
      infixl 2 bind

      syntax bind c d = c ∙ d

    module C where

      infixr 2 bind

      syntax bind c d = c ∙ d

    open A
    open B
    open C

    -- _∷_ is infix 5.
    -- _∙_ has two fixities: infixr 4 and infixr 5.
    -- _+_ is infixl 3.
    -- A.bind's notation is infix 1.
    -- B.bind and C.bind's notations are infix 2.

    -- There is one instance of "_ ∷ _" in the grammar, and one
    -- instance of "_ + _".

    -- There are three instances of "_ ∙ _" in the grammar, one
    -- corresponding to A._∙_, one corresponding to B._∙_, and one
    -- corresponding to both B.bind and C.bind.

Other changes
-------------

* Overloaded number literals.

  You can now overload natural number literals using the new builtin FROMNAT:

    {-# BUILTIN FROMNAT fromNat #-}

  The target of the builtin should be a defined name. Typically you would do
  something like

    record Number (A : Set) : Set where
      field fromNat : Nat → A

    open Number {{...}} public

    {-# BUILTIN FROMNAT fromNat #-}

  This will cause number literals 'n' to be desugared to 'fromNat n' before
  type checking.

* Negative number literals.

  Number literals can now be negative. For floating point literals it works as
  expected. For integer literals there is a new builtin FROMNEG that enables
  negative integer literals:

    {-# BUILTIN FROMNEG fromNeg #-}

  This causes negative literals '-n' to be desugared to 'fromNeg n'.

* Overloaded string literals.

  String literals can be overladed using the FROMSTRING builtin:

    {-# BUILTIN FROMSTRING fromString #-}

  The will cause string literals 's' to be desugared to 'fromString s' before
  type checking.

* Change to builtin integers.

  The INTEGER builtin now needs to be bound to a datatype with two constructors
  that should be bound to the new builtins INTEGERPOS and INTEGERNEGSUC as follows:

    data Int : Set where
      pos    : Nat -> Int
      negsuc : Nat -> Int
    {-# BUILTIN INTEGER       Int    #-}
    {-# BUILTIN INTEGERPOS    pos    #-}
    {-# BUILTIN INTEGERNEGSUC negsuc #-}

  where 'negsuc n' represents the integer '-n - 1'. For instance, '-5' is
  represented as 'negsuc 4'. All primitive functions on integers except
  primShowInteger have been removed, since these can be defined without too
  much trouble on the above representation using the corresponding functions on
  natural numbers.

  The primitives that have been removed are

    primIntegerPlus
    primIntegerMinus
    primIntegerTimes
    primIntegerDiv
    primIntegerMod
    primIntegerEquality
    primIntegerLess
    primIntegerAbs
    primNatToInteger

* Building records from modules.

  The "record { <fields> }" syntax is now extended to accept module names as
  well. Fields are thus defined using the corresponding definitions from the
  given module.

  For instance assuming this record type R and module M:

  record R : Set where
    field
      x : X
      y : Y
      z : Z

  module M where
    x = {! ... !}
    y = {! ... !}

  r : R
  r = record { M; z = {! ... !} }

  Previously one had to write `record { x = M.x; y = M.y; z = {! ... !} }`.

  More precisely this construction now supports any combination of explicit
  field definitions and applied modules.

  If a field is both given explicitly and available in one of the modules,
  then the explicit one takes precedence.

  If a field is available in more than one module then this is ambiguous
  and therefore rejected. As a consequence the order of assignments does
  not matter.

  The modules can be both applied to arguments and have import directives
  such as `hiding`, `using`, and `renaming`. In particular this construct
  subsumes the record update construction.

  Here is an example of record update:

  -- Record update. Same as: record r { y = {! ... !} }
  r2 : R
  r2 = record { R r; y = {! ... !} }

  A contrived example showing the use of hiding/renaming:

  module M2 (a : A) where
    w = {! ... !}
    z = {! ... !}

  r3 : A → R
  r3 a = record { M hiding (y); M2 a renaming (w to y) }

* Record patterns are now accepted.  Examples:

    swap : {A B : Set} (p : A × B) → B × A
    swap record{ proj₁ = a; proj₂ = b } = record{ proj₁ = b; proj₂ = a }

    thd3 : ...
    thd3 record{ proj₂ = record { proj₂ = c }} = c

* Unicode ellipsis character is allowed for the ellipsis token ... in
  `with` expressions.

* Instance search

  Performance has been improved, recursive instance search which was previously
  exponential in the depth is now only quadratic.


  Constructors of records and datatypes are not anymore automatically considered
  as instances, you have to do so explicitely, for instance:

    -- only [b] is an instance of D
    data D : Set where
      a : D
      instance
        b : D
      c : D

    -- the constructor is now an instance
    record tt : Set where
      instance constructor tt


  Instance search can now find arguments in variable types (but such candidates can
  only be lambda-bound variables, they can’t be declared as instances)

    module _ {A : Set} (P : A → Set) where

      postulate
        bla : {x : A} {{_ : P x}} → Set → Set

      -- Works, the instance argument is found in the context
      test :  {x : A} {{_ : P x}} → Set → Set
      test B = bla B

      -- Still forbidden, because [P] could be instantiated later to anything
      instance
       postulate
        forbidden : {x : A} → P x

* Detection of datatypes that satisfy K (i.e. sets)

  Agda will now try to detect datatypes that satisfy K when --without-K is
  enabled. A datatype satisfies K when it follows these three rules:
  - The types of all non-recursive constructor arguments should satisfy K
  - All recursive constructor arguments should be first-order
  - The types of all indices should satisfy K
  For example, the types [Nat], [List Nat], and [x ≡ x] (where x : Nat) are
  all recognized by Agda as satisfying K.

* New record directives eta-equality/no-eta-equality

  The keywords eta-equality/no-eta-equality enable/disable eta rules
  for the (inductive) record type being declared.

  record Σ (A : Set) (B : A -> Set) : Set where
    no-eta-equality
    constructor _,_
    field
      fst : A
      snd : B fst
  open Σ

  -- fail : ∀ {A : Set}{B : A -> Set} → (x : Σ A B) → x ≡ (fst x , snd x)
  -- fail x = refl
  --
  -- x != fst x , snd x of type Σ .A .B
  -- when checking that the expression refl has type x ≡ (fst x , snd x)

* Prop is no longer a reserved word.


Goal and error display
======================

Type checking
=============

* Large indices.

  Force constructor arguments no longer count towards the size of a datatype.
  For instance, the definition of equality below is accepted.

    data _≡_ {a} {A : Set a} : A → A → Set where
      refl : ∀ x → x ≡ x

  This gets rid of the asymmetry that the version of equality which indexes
  only on the second argument could be small, but not the version above which
  indexes on both arguments.

Compiler backends
=================

* Major Bug Fixes:

  - Function clauses with different arities are now always compiled correctly
    by the GHC/UHC backends. (Issue #727)

* Co-patterns

  - The GHC/UHC backends now support co-patterns. (Issues #1567, #1632)

* Optimizations

  - Builtin naturals are now represented as arbitrary-precision
    Integers. See the user manual, section
    "Agda Compilers -> Optimizations" for details.

* GHC Haskell backend (MAlonzo)

  - Pragmas

    Since builtin naturals are compiled to Integer you can no longer
    give a {-# COMPILED_DATA #-} pragma for Nat. The same goes for
    builtin booleans, integers, floats, characters and strings which are now
    hard-wired to appropriate Haskell types.


* UHC compiler backend

  A new backend targeting the Utrecht Haskell Compiler (UHC) is available.
  It targets the UHC Core language, and it's design is inspired by
  the Epic backend. See the user manual, section
  "Agda Compilers -> UHC Backend" for installation instructions.


  FFI

  The UHC backend has a FFI to Haskell similar to MAlonzo's.
  The target Haskell code also needs to be compilable using UHC,
  which does not support the Haskell base library version 4.*.

  FFI pragmas for the UHC backend are not checked in any way. If the pragmas
  are wrong, bad things will happen.

  Imports
  Additional Haskell modules can be brought into scope
  with the IMPORT_UHC pragma:
  {-# IMPORT_UHC Data.Char #-}
  The Haskell modules UHC.Base and UHC.Agda.Builtins are always
  in scope and don't need to be imported explicitly.

  Datatypes
  Agda datatypes can be bound to Haskell datatypes as follows:
    Haskell:
        data HsData a = HsCon1 | HsCon2 (HsData a)
    Agda:
        data AgdaData (A : Set) : Set where
          AgdaCon1 : AgdaData A
          AgdaCon2 : AgdaData A -> AgdaData A
        {-# COMPILED_DATA_UHC AgdaData HsData HsCon1 HsCon2 #-}
    The mapping has to cover all constructors of the used Haskell datatype,
    else runtime behavior is undefined!

  There are special reserved names to bind Agda datatypes to certain Haskell
  datatypes. For example, this binds an Agda datatype
  to Haskell's list datatype:
    Agda:
        data AgdaList (A : Set) : Set where
          Nil : AgdaList A
          Cons : A -> AgdaList A -> AgdaList A
        {-# COMPILED_DATA_UHC AgdaList __LIST__ __NIL__ __CONS__ #-}

  The following "magic" datatypes are available:
    HS Datatype | Datatype Pragma | HS Constructor | Constructor Pragma
    ()            __UNIT__          ()               __UNIT__
    List          __LIST__          (:)              __CONS__
                                    []               __NIL__
    Bool          __BOOL__          True             __TRUE__
                                    False            __FALSE__

  Functions
  Agda postulates can be bound to Haskell functions. Similar as in MAlonzo,
  all arguments of type Set need to be dropped before calling Haskell
  functions. An example calling the return function:
    Agda:
        postulate hs-return : {A : Set} -> A -> IO A
        {-# COMPILED_UHC hs-return (\_ -> UHC.Agda.Builtins.primReturn) #-}

Emacs mode
==========

* Less aggressive error notification.

  Previously Emacs could jump to the position of an error even if the
  type-checking process was not initiated in the current buffer. Now
  this no longer happens: If the type-checking process was initiated
  in another buffer, then the cursor is moved to the position of the
  error in the buffer visiting the file (if any) and in every window
  displaying the file, but focus should not change from one file to
  another.

  In the cases where focus does change from one file to another, one
  can now use the go-back functionality to return to the previous
  position.

* Removed the agda-include-dirs customization parameter.

  Use agda-program-args with -iDIR or -lLIB instead, or add libraries to
  ~/.agda/defaults (C:/Users/USERNAME/AppData/Roaming/agda/defaults or
  similar on Windows). See Library management, above, for more
  information.

Tools
=====

LaTeX-backend
-------------

* The default font has been changed to XITS (which is part of TeX Live):

    http://www.ctan.org/tex-archive/fonts/xits/

  This font is more complete with respect to Unicode.


agda-ghc-names
--------------

* New tool: THe command

    agda-ghc-names fixprof <compile-dir> <ProgName>.prof

  converts *.prof files obtained from profiling runs of MAlonzo-compiled
  code to *.agdaIdents.prof, with the original Agda identifiers replacing
  the MAlonzo-generated Haskell identifiers.

  For usage and more details, see src/agda-ghc-names/README.txt.

(agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-highlight-clear)
(agda2-info-action "*Type-checking*" "Checking Issue2270 (Issue2270.agda). " t)
(agda2-info-action "*Type-checking*" " Checking Common.List (List.agda). " t)
(agda2-info-action "*Type-checking*" " Checking Agda.Builtin.List (agda-default-include-path/Agda/Builtin/List.agda). " t)
(agda2-info-action "*Type-checking*" " Finished Agda.Builtin.List. " t)
(agda2-info-action "*Type-checking*" " Checking Common.Nat (Nat.agda). " t)
(agda2-info-action "*Type-checking*" " Checking Agda.Builtin.Nat (agda-default-include-path/Agda/Builtin/Nat.agda). " t)
(agda2-info-action "*Type-checking*" " Checking Agda.Builtin.Bool (agda-default-include-path/Agda/Builtin/Bool.agda). " t)
(agda2-info-action "*Type-checking*" " Finished Agda.Builtin.Bool. " t)
(agda2-info-action "*Type-checking*" " Finished Agda.Builtin.Nat. " t)
(agda2-info-action "*Type-checking*" " Finished Common.Nat. " t)
(agda2-info-action "*Type-checking*" " Finished Common.List. " t)
(agda2-info-action "*Type-checking*" " Checking Common.Equality (Equality.agda). " t)
(agda2-info-action "*Type-checking*" " Checking Agda.Builtin.Equality (agda-default-include-path/Agda/Builtin/Equality.agda). " t)
(agda2-info-action "*Type-checking*" " Finished Agda.Builtin.Equality. " t)
(agda2-info-action "*Type-checking*" " Checking Agda.Builtin.TrustMe (agda-default-include-path/Agda/Builtin/TrustMe.agda). " t)
(agda2-info-action "*Type-checking*" " Finished Agda.Builtin.TrustMe. " t)
(agda2-info-action "*Type-checking*" " Checking Common.Level (Level.agda). " t)
(agda2-info-action "*Type-checking*" " Finished Common.Level. " t)
(agda2-info-action "*Type-checking*" " Finished Common.Equality. " t)
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?0 : map f ((x ∷ xs) ++ .ys) ≡ map f (x ∷ xs) ++ map f .ys ?1 : map f ((x ∷ xs) ++ .ys) ≡ map f (x ∷ xs) ++ map f .ys ?2 : μ (_+ A) ?3 : μ (λ section → section + A) " nil)
((last . 1) . (agda2-goals-action '(0 1 2 3)))
(agda2-give-action 0 "cong (f x ∷_) ?")
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?1 : map f ((x ∷ xs) ++ .ys) ≡ map f (x ∷ xs) ++ map f .ys ?2 : μ (_+ A) ?3 : μ (λ section → section + A) ?4 : map f (xs ++ .ys) ≡ map f xs ++ map f .ys " nil)
((last . 1) . (agda2-goals-action '(4 1 2 3)))
(agda2-give-action 1 "cong (λ section → f x ∷ section) ?")
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?2 : μ (_+ A) ?3 : μ (λ section → section + A) ?4 : map f (xs ++ .ys) ≡ map f xs ++ map f .ys ?5 : map f (xs ++ .ys) ≡ map f xs ++ map f .ys " nil)
((last . 1) . (agda2-goals-action '(4 5 2 3)))
(agda2-status-action "")
(agda2-info-action "*Current Goal*" "μ (_+ A)" nil)
((last . 1) . (agda2-goals-action '(4 5 2 3)))
(agda2-status-action "")
(agda2-info-action "*Current Goal*" "μ (λ section → section + A)" nil)
((last . 1) . (agda2-goals-action '(4 5 2 3)))

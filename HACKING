Working with Git (from 2014-06-15)

* Maintenance branches.

  For old releases (starting with 2.4.0) there are maintenance branches
  maint-$VERSION, where e.g. VERSION=2.4.0.
  Bug fixes should be based on the appropriate maintenance branch
  whenever possible. See below.

* Branches should be used generously when fixing bugs and adding features.
  Whenever possible bug fix branches should be based on the latest maintenance
  branch rather than the master branch.  For instance, fixing issue 1234 would
  work as follows:

    git checkout maint-$VERSION
    git checkout -b issue1234 # create a new branch based on maint-$VERSION
    ... work on issue 1234 ...
    git commit -p             # record some patches

    ... working for a long time on issue 1234 ...
    git rebase maint-$VERSION # get fresh upstream patches, keep own work on top
    git commit -p             # record some more patches

    make install-bin test     # ensure compilation and tests

    # Done!  If you have commit rights:

    ## Merge into maint
    git checkout maint-$VERSION
    git merge issue1234       # merge into maint-$VERSION
    make install-bin test     # ensure compilation and tests
    git push

    ## Merge into master
    git checkout master
    git merge issue1234       # merge into master
    make install-bin test     # ensure compilation and tests
    git push
    git branch -d issue1234   # delete the branch

    # Otherwise, push branch to your GitHub fork of Agda and create a pull
    # request.
    git push -u myfork issue1234
    Go to https://github.com/agda/agda and click the green button next to the
    branch dropdown.

  For new features replace maint-$VERSION with master above.

  The above procedure has the drawback that with each checkout, many
  source files are touched and recompilation is slow.  Here is an
  alternative workflow, if you have commit rights and two local
  repositories, one on master and one on maint-$VERSION (both up-to-date).

    maint$  git checkout -b issue1234
    maint$  git commit ...
    maint$  git checkout maint-$VERSION
    maint$  git merge issue1234
    maint$  make install-bin test
    maint$  git push
    maint$  git branch -d issue1234

    # Now fast-forward maint-$VERSION branch without checking it out.
    # Merge it into master (assuming maint-$VERSION is a `subset' of master).

    master$ git fetch origin maint-$VERSION:maint-$VERSION
    master$ git pull
    master$ git merge maint-$VERSION
    master$ make install-bin test
    master$ git push

    # Fast-forward master

    maint$  git fetch origin master:master
    maint$  git pull

* If you want to find the commit that introduced a regression that
  caused Module-that-should-be-accepted to be rejected, then you can
  try the following recipe:

    git clone <agda repository> agda-bug
    cd agda-bug
    git checkout <suitable branch>
    cabal sandbox init
    git bisect start <bad commit> <good commit>
    cp <some path>/Module-that-should-be-accepted.agda .
    git bisect run sh -c \
      "cabal install --disable-library-profiling \
                     --disable-documentation || exit 125; \
       .cabal-sandbox/bin/agda --ignore-interfaces \
         Module-that-should-be-accepted.agda"

  The recipe can be adapted to other situations as well. For instance,
  the commit that introduced a performance regression can perhaps be
  found using the timeout command.

Testing and documentation

* When you implement a new feature it needs to be documented in
  doc/release-notes/<next-version>.txt.
  When you fix a bug, drop a note in CHANGELOG.

* In both cases, you need to add regression tests
  under test/succeed and test/fail, and maybe also
  test/interaction. When adding test cases under test/fail, remember
  to record the error messages (.err files) after running make test.

* Run the test-suite, using make test.  Maybe you want to `cabal build'
  first as well.

* Tests under test/fail can fail if an error message has changed.
  You will be asked whether to accept the new error message.
  Alternatively, you can touch the corresponding source file, since,
  when the test case changes, it is assumed that the error message
  changes as well.

* Make sure you do not introduce performance regression.  If you

    make library-test

  you get a small table with benchmarks at the end.
  (Due to garbage collection, these benchmarks are not 100% stable.)
  Compare this with benchmarks before the new feature/bug fix.

* To avoid problems with the whitespace test failing we suggest add the
  following lines to .git/hooks/pre-commit

    echo "Starting pre-commit"
    make check-whitespace
    if [ $? -ne 0 ]; then
      exit 1
    fi
    echo "Ending pre-commit"

  You can fix the whitespace issues running

    make install-fix-agda-whitespace
    make fix-whitespace

Some Agda Hacking Lore

* Whenever you change the interface file format you should update
  Agda.TypeChecking.Serialise.currentInterfaceVersion.

* Use __IMPOSSIBLE__ instead of calls to error. __IMPOSSIBLE__
  generates errors of the following form:

   An internal error has occurred. Please report this as a bug.
   Location of the error: ...

  Calls to error can make Agda fail with an error message in the *ghci*
  buffer.

Haskell-mode and the agda codebase

* If you're using a recent haskell-mode (use `M-x package-install
  haskell-mode' to be sure, what's packaged by debian is not enough),
  and you're editing an Haskell file, you can load it up in by tapping
  `C-c C-l', and agreeing to emacs proposals about paths and whatsnot.

  You can toggle from :load to :reload with `C-u C-c C-l', which you
  probably want since otherwise you'll load up the world each time.

  You have semantic jumps with `M-.'.  No more pesky T.A.G.S.!

  You can jump to errors and warnings with `C-x `'.  You can probably do
  many other things, emacs is your oyster.

  One little caveat: GHCi needs some generated files to work.  To make
  sure you have them, you can issue `cabal build' and kill it when it
  starts compiling modules.  There doesn't seem to be a programmatic way
  to instruct cabal to do so.  They're pretty stable so you don't have
  to do that often.

Emacs mode

* Load times (wall-clock time) can be measured using
  agda2-measure-load-time.

* If you fix a bug related to syntax highlighting, please add a test
  case under test/interaction. Example .in file command:

    IOTCM "Foo.agda" NonInteractive Direct (Cmd_load "Foo.agda" [])

  If you want to include interactive highlighting directives, replace
  NonInteractive with Interactive.

* The following elisp code by Nils Anders Danielsson fixes whitespace
  issues upon save.  Add to your .emacs.

  (defvar fix-whitespace-modes
    '(text-mode agda2-mode haskell-mode emacs-lisp-mode LaTeX-mode TeX-mode)
    "*Whitespace issues should be fixed when these modes are used.")

  (add-hook 'before-save-hook
    (lambda nil
      (when (and (member major-mode fix-whitespace-modes)
                 (not buffer-read-only))
        ;; Delete trailing whitespace.
        (delete-trailing-whitespace)
        ;; Insert a final newline character, if necessary.
        (save-excursion
          (save-restriction
            (widen)
            (unless (equal ?\n (char-before (point-max)))
              (goto-char (point-max))
              (insert "\n")))))))

Cabal stuff

* For running cabal repl use the following command (see
  https://code.google.com/p/agda/issues/detail?id=1196):

  cabal repl --ghc-options=-Wwarn

TODO: The following information is outdated, referring to darcs.  If
you know how to port these tips to git, update this file.

* Under darcs 2.5 the --test flag is not enabled by default. This can
  be changed by adding the following line to _darcs/prefs/defaults:

    ALL test

